"use client"
import { api } from "@/services/api";
import { createContext, Dispatch, SetStateAction, useEffect, useState } from "react";
// Generated by https://quicktype.io

export interface IClientResponse {
    id: string;
    username: string;
    created_at: string;
    email: string;
    name: string;
    phone: string;
    contacts: any[];
}
export interface ITokenAccess {
    access_token: string
}

interface IAuthContext {
    profile: IClientResponse | undefined
    setProfile: Dispatch<SetStateAction<IClientResponse | undefined>>
    token: string | undefined
    setToken: Dispatch<SetStateAction<string | undefined>>,
    trigger: boolean
    setTrigger: Dispatch<SetStateAction<boolean>>
}
interface IAuthContextParams {
    children: React.ReactNode
}
export const AuthContext = createContext({} as IAuthContext)


export const AuthProvider = ({ children }: IAuthContextParams) => {
    const [profile, setProfile] = useState<IClientResponse | undefined>()
    const [token, setToken] = useState<string | undefined>()
    const [trigger, setTrigger] = useState<boolean>(false)
    const getProfileOfCurrentClient = async () => {
        if (localStorage.getItem('project_full_stack:token')) {
            setToken(localStorage.getItem('project_full_stack:token') as string)
            const response = await api.get('/client', { headers: { Authorization: `Bearer ${token}` } })
            setProfile(response.data)
            return null
        } else {
            setProfile(undefined)
        }

    }
    useEffect(() => {
        getProfileOfCurrentClient()
    }, [token, trigger])
    return (
        <AuthContext.Provider value={{
            profile,
            setProfile,
            token,
            setToken,
            trigger,
            setTrigger
        }}>
            {children}
        </AuthContext.Provider>
    )
}